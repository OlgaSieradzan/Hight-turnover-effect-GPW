library(readxl)
wykres <- read_excel("zestaw_branze.xlsx",
sheet = "Wykres")
wykres <- read_excel("zestaw_branze.xlsx",
sheet = "Stopa_1")
library(readxl)
wykres <- read_excel("zestaw_branze.xlsx",
sheet = "Wykres")
wykres <- read_excel("zestaw_branze.xlsx",
sheet = "Stopa 1")
library(readxl)
wykres <- read_excel("zestaw_branze.xlsx",
sheet = "Wykres")
wykres <- read_excel("zestaw_branze.xlsx",
sheet = "Stopy_1")
wig_d <- read.csv("C:/Users/olgas/Downloads/wig_d.csv")
wykres1 <- data.frame (wykres[1:500,], wig_d$Skumulowana[1:500])
library(ggplot2)
library(dplyr)
# Konwersja kolumny Data na format Date
wykres1 <- data.frame (wykres[1:500,], wig_d$Skumulowana[1:500])
wykres1$Data <- as.Date(wykres1$Data)  # Konwersja na klasę Date
View(wykres)
library(ggplot2)
library(dplyr)
# Konwersja kolumny Data na format Date
wykres1 <- data.frame (wykres[1:500,], wig_d$Skumulowana[1:500])
wykres1$Data <- as.Date(wykres1$Daty)  # Konwersja na klasę Date
library(ggplot2)
library(dplyr)
# Konwersja kolumny Data na format Date
wykres1 <- data.frame (wykres[1:500,], wig_d$Skumulowana[1:500])
wykres1$Data <- as.Date(wykres1$daty)  # Konwersja na klasę Date
# Tworzenie wykresu
wykres1 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = all_10_5_1, color = "10_5"), size = 0.7) +
geom_line(aes(y= wig_d.Skumulowana.1.500. , color = "20_4"), size = 0.7) +
theme_minimal(base_size = 18) +
scale_color_manual(
values = c("#27408B", "#556B2F", "#8B2252"),
breaks = c("10_5", "20_4", "30_3"),
name = ""
) +
scale_x_date(
date_labels = "%Y",  # Formatowanie osi X - tylko lata
date_breaks = "1 year"  # Wyświetlanie etykiet co 1 rok
) +
labs(
y = "Wartość inwestycji",
x = "Data",
fill = NULL,
colour = "Strategia"
)
library(ggplot2)
library(dplyr)
# Konwersja kolumny Data na format Date
wykres1 <- data.frame (wykres[1:500,], wig_d$Skumulowana[1:500])
wykres1$Data <- as.Date(wykres1$daty)  # Konwersja na klasę Date
# Tworzenie wykresu
wykres1 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = all_10_5_1, color = "10_5"), size = 0.7) +
geom_line(aes(y= wig_d.Skumulowana.1.500. , color = "20_4"), size = 0.7) +
theme_minimal(base_size = 18) +
scale_color_manual(
values = c("#27408B", "#556B2F"),
breaks = c("Strategia high-voulum turnover premium", "WIG"),
name = ""
) +
scale_x_date(
date_labels = "%Y",  # Formatowanie osi X - tylko lata
date_breaks = "1 year"  # Wyświetlanie etykiet co 1 rok
) +
labs(
y = "Wartość inwestycji",
x = "Data",
fill = NULL,
colour = "Strategia"
)
library(ggplot2)
library(dplyr)
# Konwersja kolumny Data na format Date
wykres1 <- data.frame (wykres[1:500,], wig_d$Skumulowana[1:500])
wykres1$Data <- as.Date(wykres1$daty)  # Konwersja na klasę Date
# Tworzenie wykresu
wykres1 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = all_10_5_1, color = "Strategia high-voulum turnover premium"), size = 0.7) +
geom_line(aes(y= wig_d.Skumulowana.1.500. , color = "WIG"), size = 0.7) +
theme_minimal(base_size = 18) +
scale_color_manual(
values = c("#27408B", "#556B2F"),
breaks = c("Strategia high-voulum turnover premium", "WIG"),
name = ""
) +
scale_x_date(
date_labels = "%Y",  # Formatowanie osi X - tylko lata
date_breaks = "1 year"  # Wyświetlanie etykiet co 1 rok
) +
labs(
y = "Wartość inwestycji",
x = "Data",
fill = NULL,
colour = "Strategia"
)
library(ggplot2)
library(dplyr)
# Konwersja kolumny Data na format Date
wykres1 <- data.frame (wykres[1:500,], wig_d$Skumulowana[1:500])
wykres1$Data <- as.Date(wykres1$daty)  # Konwersja na klasę Date
# Tworzenie wykresu
wykres1 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = all_10_5_1, color = "Badana strategia"), size = 0.7) +
geom_line(aes(y= wig_d.Skumulowana.1.500. , color = "WIG"), size = 0.7) +
theme_minimal(base_size = 18) +
scale_color_manual(
values = c("#27408B", "#556B2F"),
breaks = c("Badana strategia", "WIG"),
name = ""
) +
scale_x_date(
date_labels = "%Y",  # Formatowanie osi X - tylko lata
date_breaks = "1 year"  # Wyświetlanie etykiet co 1 rok
) +
labs(
y = "Wartość inwestycji",
x = "Data",
fill = NULL,
colour = "Strategia"
)
library(ggplot2)
library(dplyr)
# Konwersja kolumny Data na format Date
wykres1 <- data.frame (wykres[1:500,], wig_d$Skumulowana[1:500])
wykres1$Data <- as.Date(wykres1$daty)  # Konwersja na klasę Date
# Tworzenie wykresu
wykres1 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = all_10_5_1, color = "Badana strategia"), size = 0.7) +
geom_line(aes(y= wig_d.Skumulowana.1.500. , color = "WIG"), size = 0.7) +
theme_minimal(base_size = 18) +
scale_color_manual(
values = c( "#556B2F", "#CD3700"),
breaks = c("Badana strategia", "WIG"),
name = ""
) +
scale_x_date(
date_labels = "%Y",  # Formatowanie osi X - tylko lata
date_breaks = "1 year"  # Wyświetlanie etykiet co 1 rok
) +
labs(
y = "Wartość inwestycji",
x = "Data",
fill = NULL,
colour = "Strategia"
)
library(ggplot2)
library(dplyr)
# Konwersja kolumny Data na format Date
wykres1 <- data.frame (wykres[1:500,], wig_d$Skumulowana[1:500])
wykres1$Data <- as.Date(wykres1$daty)  # Konwersja na klasę Date
# Tworzenie wykresu
wykres1 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = all_10_5_10), color = "#556B2F", size = 0.7) +
geom_line(aes(y= wig_d.Skumulowana.1.500. ),color = "#CD3700", size = 0.7) +
theme_minimal(base_size = 18) +
scale_x_date(
date_labels = "%Y",  # Formatowanie osi X - tylko lata
date_breaks = "1 year"  # Wyświetlanie etykiet co 1 rok
) +
labs(
y = "Wartość inwestycji",
x = "Data",
fill = NULL,
colour = "Strategia"
)
library(ggplot2)
library(dplyr)
# Konwersja kolumny Data na format Date
wykres1 <- data.frame (wykres[1:500,], wig_d$Skumulowana[1:500])
wykres1$Data <- as.Date(wykres1$daty)  # Konwersja na klasę Date
# Tworzenie wykresu
wykres1 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = all_10_5_1), color = "#556B2F", size = 0.7) +
geom_line(aes(y= wig_d.Skumulowana.1.500. ),color = "#CD3700", size = 0.7) +
theme_minimal(base_size = 18) +
scale_x_date(
date_labels = "%Y",  # Formatowanie osi X - tylko lata
date_breaks = "1 year"  # Wyświetlanie etykiet co 1 rok
) +
labs(
y = "Wartość inwestycji",
x = "Data",
fill = NULL,
colour = "Strategia"
)
library(ggplot2)
library(dplyr)
# Konwersja kolumny Data na format Date
wykres1 <- data.frame (wykres[500:1002,], wig_d$Skumulowana[500:1002])
wykres1$Data <- as.Date(wykres1$daty)  # Konwersja na klasę Date
# Tworzenie wykresu
wykres1 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = all_10_5_1), color = "#556B2F", size = 0.7) +
geom_line(aes(y= wig_d.Skumulowana.1.500. ),color = "#CD3700", size = 0.7) +
theme_minimal(base_size = 18) +
scale_x_date(
date_labels = "%Y",  # Formatowanie osi X - tylko lata
date_breaks = "1 year"  # Wyświetlanie etykiet co 1 rok
) +
labs(
y = "Wartość inwestycji",
x = "Data",
fill = NULL,
colour = "Strategia"
)
View(wykres1)
library(ggplot2)
library(dplyr)
# Konwersja kolumny Data na format Date
wykres1 <- data.frame (wykres[500:1002,], wig_d$Skumulowana[500:1002])
wykres1$Data <- as.Date(wykres1$daty)  # Konwersja na klasę Date
# Tworzenie wykresu
wykres1 %>%
ggplot(aes(x = Data)) +
geom_line(aes(y = all_10_5_1), color = "#556B2F", size = 0.7) +
geom_line(aes(y= wig_d.Skumulowana.500.1002. ),color = "#CD3700", size = 0.7) +
theme_minimal(base_size = 18) +
scale_x_date(
date_labels = "%Y",  # Formatowanie osi X - tylko lata
date_breaks = "1 year"  # Wyświetlanie etykiet co 1 rok
) +
labs(
y = "Wartość inwestycji",
x = "Data",
fill = NULL,
colour = "Strategia"
)
wig <- read.csv("C:/Users/olgas/Downloads/wig_d (1).csv")
View(wig)
View(Stopy)
wig <- read.csv("C:/Users/olgas/Downloads/wig_d (1).csv")
w_igniepewnosc <- wig %>%
filter(Data %in% daty_niepwności)
Stopy_niepewnosc <- Stopy[,1:25] %>%
filter(data %in% daty_pewnosc)
wig <- read.csv("C:/Users/olgas/Downloads/wig_d (1).csv")
w_igniepewnosc <- wig %>%
filter(Data %in% daty_niepwności)
Stopy_niepewnosc <- Stopy[,1:25] %>%
filter(daty %in% daty_pewnosc)
View(w_igniepewnosc)
wig <- read.csv("C:/Users/olgas/Downloads/wig_d (1).csv")
wig$Data <- as.Date(wig$Data)
wig_niepewnosc <- wig %>%
filter(Data %in% daty_niepwności)
Stopy_niepewnosc <- Stopy[,1:25] %>%
filter(daty %in% daty_pewnosc)
View(wig)
View(wig_d)
wig <- read.csv("C:/Users/olgas/Downloads/wig_d (1).csv")
View(wig)
wig <- read.csv("C:/Users/olgas/Downloads/wig_d (1).csv")
wig$Data <- as.Date(wig$Data, format ="%m/%d/%Y")
wig_niepewnosc <- wig %>%
filter(Data %in% daty_niepwności)
Stopy_niepewnosc <- Stopy[,1:25] %>%
filter(daty %in% daty_pewnosc)
wig <- read.csv("C:/Users/olgas/Downloads/wig_d (1).csv")
wig$Data <- as.Date(wig$Data, format ="%d/%m/%Y")
wig_niepewnosc <- wig %>%
filter(Data %in% daty_niepwności)
Stopy_niepewnosc <- Stopy[,1:25] %>%
filter(daty %in% daty_pewnosc)
wig <- read.csv("C:/Users/olgas/Downloads/wig_d (1).csv")
wig$Data <- as.Date(wig$Data, format ="%d/%m/%Y")
Stopy$daty <- as.Date(Stopy$daty , format ="%d/%m/%Y")
wig_niepewnosc <- wig %>%
filter(Data %in% daty_niepwności)
Stopy_niepewnosc <- Stopy[,1:25] %>%
filter(daty %in% daty_pewnosc)
View(Stopy_niepewnosc)
wig <- read.csv("C:/Users/olgas/Downloads/wig_d (1).csv")
wig$Data <- as.Date(wig$Data, format ="%d/%m/%Y")
Stopy$daty <- as.Date(Stopy$daty , format ="%d/%m/%Y")
wig_niepewnosc <- wig %>%
filter(Data %in% daty_niepwności)
Stopy_niepewnosc <- Stopy[,1:25] %>%
filter(daty %in% daty_niepwności)
wilcox.test(wig_niepewnosc$Zamkniecie, Stopy_niepewnosc$all_10_1_1)
wilcox.test(wig_niepewnosc$Zamkniecie, Stopy_niepewnosc$all_10_2_1)
# Lista na wyniki
wyniki <- lapply(Stopy_niepewnosc, function(kolumna) {
# Wykonaj test Wilcoxona dla każdej kolumny
wynik <- wilcox.test(wig_niepewnosc$Zamkniecie, kolumna)
# Zwróć istotne informacje
data.frame(
Kolumna = deparse(substitute(kolumna)),  # Nazwa kolumny
p_value = wynik$p.value,                # Wartość p
statystyka = wynik$statistic            # Statystyka testu
)
})
# Lista na wyniki
wyniki <- lapply(Stopy_niepewnosc[,2:25], function(kolumna) {
# Wykonaj test Wilcoxona dla każdej kolumny
wynik <- wilcox.test(wig_niepewnosc$Zamkniecie, kolumna)
# Zwróć istotne informacje
data.frame(
Kolumna = deparse(substitute(kolumna)),  # Nazwa kolumny
p_value = wynik$p.value,                # Wartość p
statystyka = wynik$statistic            # Statystyka testu
)
})
# Konwersja listy wyników do ramki danych
wyniki_df <- do.call(rbind, wyniki)
# Wyświetl wyniki
print(wyniki_df)
# Lista na wyniki
wyniki <- lapply(Stopy_niepewnosc[,2:25], function(kolumna) {
# Wykonaj test Wilcoxona dla każdej kolumny
wynik <- wilcox.test(wig_niepewnosc$Zamkniecie, kolumna)
# Zwróć istotne informacje
data.frame(
Kolumna = deparse(substitute(kolumna)),  # Nazwa kolumny
p_value = round(wynik$p.value, 4)               # Wartość p
statystyka = wynik$statistic            # Statystyka testu
# Lista na wyniki
wyniki <- lapply(Stopy_niepewnosc[,2:25], function(kolumna) {
# Wykonaj test Wilcoxona dla każdej kolumny
wynik <- wilcox.test(wig_niepewnosc$Zamkniecie, kolumna)
# Zwróć istotne informacje
data.frame(
Kolumna = deparse(substitute(kolumna)),  # Nazwa kolumny
p_value = round(wynik$p.value, 4) ,              # Wartość p
statystyka = wynik$statistic            # Statystyka testu
)
})
# Konwersja listy wyników do ramki danych
wyniki_df <- do.call(rbind, wyniki)
# Wyświetl wyniki
print(wyniki_df)
ggplot()+
geom_density(aes(x = wig_niepewnosc$Zamkniecie))+
geom_density(aes(x = Stopy_niepewnosc$all_10_2_1))
View(Stopy_niepewnosc)
ggplot()+
geom_density(aes(x = wig_niepewnosc$Zamkniecie))+
ggplot()+
geom_density(aes(x = wig_niepewnosc$Zamkniecie))
# Lista na wyniki
wyniki <- lapply(Stopy_niepewnosc[,2:25], function(kolumna) {
# Wykonaj test Wilcoxona dla każdej kolumny
wynik <- wilcox.test(wig_niepewnosc$Stopa, kolumna)
# Zwróć istotne informacje
data.frame(
Kolumna = deparse(substitute(kolumna)),  # Nazwa kolumny
p_value = round(wynik$p.value, 4) ,              # Wartość p
statystyka = wynik$statistic            # Statystyka testu
)
})
# Konwersja listy wyników do ramki danych
wyniki_df <- do.call(rbind, wyniki)
# Wyświetl wyniki
print(wyniki_df)
ggplot()+
geom_density(aes(x = wig_niepewnosc$Stopa))+
geom_density(aes(x = Stopy_niepewnosc$all_10_1_1))
ggplot()+
geom_density(aes(x = wig_niepewnosc$Stopa))+
geom_density(aes(x = Stopy_niepewnosc$all_20_1_1))
ggplot()+
geom_density(aes(x = wig_niepewnosc$Stopa))+
geom_density(aes(x = Stopy_niepewnosc$all_20_1_1))+
labs(x = "Stopy zwrotu")+
theme_minimal(base_size = 18)
ggplot()+
geom_density(aes(x = wig_niepewnosc$Stopa), fill =  "#698B22", alpha(= 0.6))+
ggplot()+
geom_density(aes(x = wig_niepewnosc$Stopa), fill =  "#698B22", alpha= 0.6)+
geom_density(aes(x = Stopy_niepewnosc$all_20_1_1))+
labs(x = "Stopy zwrotu")+
theme_minimal(base_size = 18)
ggplot()+
geom_density(aes(x = wig_niepewnosc$Stopa), fill =  "#698B22", alpha= 0.6)+
geom_density(aes(x = Stopy_niepewnosc$all_20_1_1), fill =  "#508B11", alpha= 0.6)+
labs(x = "Stopy zwrotu")+
theme_minimal(base_size = 18)
ggplot()+
geom_density(aes(x = wig_niepewnosc$Stopa), fill =  "#698B22", alpha= 0.6)+
geom_density(aes(x = Stopy_niepewnosc$all_20_1_1), fill =  "#508B11", alpha= 0.6)+
labs(x = "Stopy zwrotu")+
theme_minimal(base_size = 18)+
xlim(-0.2,0.2)
ggplot() +
geom_density(aes(x = wig_niepewnosc$Stopa, fill = "WIG Niepewność"), alpha = 0.6) +
geom_density(aes(x = Stopy_niepewnosc$all_20_1_1, fill = "Stopy Niepewność"), alpha = 0.6) +
labs(
x = "Stopy zwrotu",
fill = "Legenda"  # Nazwa legendy
) +
theme_minimal(base_size = 18) +
scale_fill_manual(
values = c("WIG Niepewność" = "#698B22", "Stopy Niepewność" = "#508B11")
) +
xlim(-0.2, 0.2)
ggplot() +
geom_density(aes(x = wig_niepewnosc$Stopa, fill = "WIG Niepewność"), alpha = 0.6) +
geom_density(aes(x = Stopy_niepewnosc$all_20_1_1, fill = "Stopy Niepewność"), alpha = 0.6) +
labs(
x = "Stopy zwrotu",
fill = "Legenda"  # Nazwa legendy
) +
theme_minimal(base_size = 18) +
scale_fill_manual(
values = c("WIG Niepewność" = "#698B22", "Stopy Niepewność" = "#086E11")
) +
xlim(-0.2, 0.2)
ggplot() +
geom_density(aes(x = wig_niepewnosc$Stopa, fill = "WIG"), alpha = 0.6) +
geom_density(aes(x = Stopy_niepewnosc$all_20_1_1, fill = "Badana strategia"), alpha = 0.6) +
labs(
x = "Stopy zwrotu",
fill = "Legenda"  # Nazwa legendy
) +
theme_minimal(base_size = 18) +
scale_fill_manual(
values = c("WIG" = "#698B22", "Badana strategia" = "#086E11")
) +
xlim(-0.2, 0.2)
ggplot(wyniki_df, aes(x = reorder(Kolumna, p_value), y = p_value)) +
geom_bar(stat = "identity", fill = "#508B11", alpha = 0.7) +
coord_flip() +  # Odwrócenie osi, aby uzyskać poziomy wykres
labs(
x = "Kolumna",
y = "p-value",
title = "Wartości p-value dla poszczególnych kolumn"
) +
theme_minimal(base_size = 14)
# Lista na wyniki
wyniki <- lapply(Stopy_niepewnosc[,2:25], function(kolumna) {
# Wykonaj test Wilcoxona dla każdej kolumny
wynik <- wilcox.test(wig_niepewnosc$Stopa, kolumna)
# Zwróć istotne informacje
data.frame(
Kolumna = deparse(substitute(kolumna)),  # Nazwa kolumny
p_value = round(wynik$p.value, 4) ,              # Wartość p
statystyka = wynik$statistic            # Statystyka testu
)
})
# Konwersja listy wyników do ramki danych
wyniki_df <- do.call(rbind, wyniki)
wyniki_df$Kolumna <- row.names(wyniki_df)
# Wyświetl wyniki
print(wyniki_df)
ggplot(wyniki_df, aes(x = reorder(Kolumna, p_value), y = p_value)) +
geom_bar(stat = "identity", fill = "#508B11", alpha = 0.7) +
coord_flip() +  # Odwrócenie osi, aby uzyskać poziomy wykres
labs(
x = "Kolumna",
y = "p-value",
title = "Wartości p-value dla poszczególnych kolumn"
) +
theme_minimal(base_size = 14)
ggplot(wyniki_df, aes(x = reorder(Kolumna, p_value), y = p_value)) +
geom_bar(stat = "identity", fill = "#508B11", alpha = 0.7) +
coord_flip() +  # Odwrócenie osi, aby uzyskać poziomy wykres
labs(
x = "Kolumna",
y = "p-value"
) +
geom_vline(xintercept = 0.05, color = "red")
theme_minimal(base_size = 14)
ggplot(wyniki_df, aes(x = reorder(Kolumna, p_value), y = p_value)) +
geom_bar(stat = "identity", fill = "#508B11", alpha = 0.7) +
coord_flip() +  # Odwrócenie osi, aby uzyskać poziomy wykres
labs(
x = "Kolumna",
y = "p-value"
) +
geom_vline(xintercept = 0.5, color = "red")
theme_minimal(base_size = 14)
ggplot(wyniki_df, aes(x = reorder(Kolumna, p_value), y = p_value)) +
geom_bar(stat = "identity", fill = "#508B11", alpha = 0.7) +
coord_flip() +  # Odwrócenie osi, aby uzyskać poziomy wykres
labs(
x = "Kolumna",
y = "p-value"
) +
geom_hline(xintercept = 0.5, color = "red")
ggplot(wyniki_df, aes(x = reorder(Kolumna, p_value), y = p_value)) +
geom_bar(stat = "identity", fill = "#508B11", alpha = 0.7) +
coord_flip() +  # Odwrócenie osi, aby uzyskać poziomy wykres
labs(
x = "Kolumna",
y = "p-value"
) +
geom_hline(yintercept = 0.05, color = "red", linetype = "dashed", size = 1) +  # Pozioma linia
theme_minimal(base_size = 14)
ggplot(wyniki_df, aes(x = reorder(Kolumna, p_value), y = p_value)) +
geom_bar(stat = "identity", fill = "#508B11", alpha = 0.7) +
coord_flip() +  # Odwrócenie osi, aby uzyskać poziomy wykres
labs(
x = "Strategia",
y = "p-value"
) +
geom_hline(yintercept = 0.05, color = "red", linetype = "dashed", size = 1) +  # Pozioma linia
theme_minimal(base_size = 14)
